; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "undefined" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Aborting jack-in. No project type selected.
(inc (rand-int 10)); Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/gavr/Documents/Projects/Fun/clojure/no-wo-read ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:44183 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉my-stuff.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉my-stuff.core꞉> 
8
clj꞉my-stuff.core꞉> 
#'my-stuff.core/get-random-num-up-to-map-size
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
3
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
3
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
3
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
#'my-stuff.core/get-random-num-up-to-map-size
clj꞉my-stuff.core꞉> 
; Execution error (ClassCastException) at my-stuff.core/get-random-num-up-to-map-size (form-init8157037697042479629.clj:34).
; class java.lang.Integer cannot be cast to class clojure.lang.IFn (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉my-stuff.core꞉> 
; Execution error (ClassCastException) at my-stuff.core/get-random-num-up-to-map-size (form-init8157037697042479629.clj:34).
; class java.lang.Integer cannot be cast to class clojure.lang.IFn (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉my-stuff.core꞉> 
#'my-stuff.core/get-random-num-up-to-map-size
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:44:1).
; Unable to resolve symbol: count-to-3 in this context
clj꞉my-stuff.core꞉> 
#'my-stuff.core/count-to-3
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
2
clj꞉my-stuff.core꞉> 
0
clj꞉my-stuff.core꞉> 
1
clj꞉my-stuff.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/gavr/Documents/Projects/Fun/clojure/no-wo-read ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:44523 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉my-stuff.core꞉> 
; Jack-in done.
clj꞉my-stuff.core꞉> 
#'my-stuff.core/random-key
clj꞉my-stuff.core꞉> 
:a
clj꞉my-stuff.core꞉> 
:b
clj꞉my-stuff.core꞉> 
:b
clj꞉my-stuff.core꞉> 
:b
clj꞉my-stuff.core꞉> 
:a
clj꞉my-stuff.core꞉> 
:b
clj꞉my-stuff.core꞉> 
:b
clj꞉my-stuff.core꞉> 
:a
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:65:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
#'my-stuff.core/save-data
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:65:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:64:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
#'my-stuff.core/data-from-file
clj꞉my-stuff.core꞉> 
#'my-stuff.core/data-from-file
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:64:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:64:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
; Syntax error compiling at (src/my_stuff/core.clj:64:1).
; Unable to resolve symbol: get-next-triple in this context
clj꞉my-stuff.core꞉> 
